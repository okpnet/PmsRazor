@inherits QualRazorComponentBase
@typeparam TProperty

@switch (FieldDataTypes)
{
    case FieldDataType.Number:
        var numberProvider = Provider as NumberFieldProvider<TProperty> ?? new();
        <EditerNumber @bind-Value="Value"
                      Tval="TProperty"
                      AdditionalAttributes="@MergeAttribute"
                      Comma="@numberProvider.IsComma"
                      Degit="@numberProvider.NumberOfDigit"
                      MaxValue="@numberProvider.MaxValue"
                      MinValue="@numberProvider.MinValue"></EditerNumber>
        break;
    case FieldDataType.Check:
        var checkProvider = Provider as CheckFieldProvider<TProperty> ?? new();ProviderFactory.CreateChekcProvider<TProperty>();
        <EditerBool AdditionalAttributes="@MergeAttribute"
                    @bind-Value="Value"
                    Tval="TProperty"
                    TrueValue="@checkProvider.TrueValue"
                    FalseValue="@checkProvider.FalseValue"></EditerBool>
        break;
    case FieldDataType.Date:
        var dateProvider = Provider as DateFieldProvider ?? new();
        <EditerDate AdditionalAttributes="@MergeAttribute"
                    @bind-Value="Value"
                    Tval="TProperty"
                    DateType="@dateProvider.DateType"
                    CustomParseFormat="@dateProvider.ParseFormat"></EditerDate>
        break;
    case FieldDataType.TiemSpan:
        var timespanOption = Provider as TimespanFieldProvider ?? new();
        <EditerTimeSpan AdditionalAttributes="@MergeAttribute"
                        @bind-Val="@Value"
                        ValueExpression="PropertyExpression"
                        Tval="TProperty"
                        Comma="@timespanOption.IsComma"
                        MaxValue="@timespanOption.MaxValue"
                        Degit="@timespanOption.NumberOfDigit"
                        TimeSpanUnit="@timespanOption.Unit"></EditerTimeSpan>
        break;
    case FieldDataType.Text:
        var textProvider = Provider as TextFieldProvider ?? new();
        if (textProvider.IsMutiLine)
        {
            <EditerTextArea AdditionalAttributes="@MergeAttribute"
                            @bind-value="@Value"
                            ValueExpression="PropertyExpression"
                            Tval="TProperty">
            </EditerTextArea>
        }
        else
        {
            <EditerText AdditionalAttributes="@MergeAttribute"
                        @bind-value="@Value"
                        ValueExpression="PropertyExpression"
                        Tval="TProperty"
                        EditType="@textProvider.EditType"></EditerText>
        }
        break;
    case FieldDataType.Select:
        var selectProvider = Provider as SelectFieldProvider<TProperty> ?? new();
        <div @attributes ="@MergeAttribute">
            <EditerSelect 
                          @bind-Value="Value"
                          Source="@(()=>selectProvider.Source)"
                          OptionContents="@selectProvider.GetOptionText"
                          ChoosePromptContents="@selectProvider.ChoosePrompt"></EditerSelect>
        </div>
        break;
    case FieldDataType.RadioGroup:
        <Microsoft.AspNetCore.Components.Forms.InputRadioGroup @bind-Value="Value">
            @ChildContent
        </Microsoft.AspNetCore.Components.Forms.InputRadioGroup>
        break;
    case FieldDataType.Radio:
        <div class="@CssClasses.FIELD_RADIO">
            <Microsoft.AspNetCore.Components.Forms.InputRadio Value="@Value" ></Microsoft.AspNetCore.Components.Forms.InputRadio>
            @ChildContent
        </div>
        break;
    @* default: *@
        @* throw new NotImplementedException($"'{FieldDataTypes}' is not implemented to switch cases."); *@
}