@using QualRazorCore.Options.BuiltIn
@inherits OptionParameterRazorCore
@typeparam TModel where TModel:class
@typeparam TProperty

@switch (BaseOptions)
{
    case NumberOption<TProperty> numberOption:
        <EditerNumber 
            Value="@Value"
            ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                      AdditionalAttributes="@numberOption.FieldAdditionalAttributes"
                      PlaceHolder="@numberOption.PlaceHolder"
                      ValueExpression="PropertyExpression"
                      Comma="@numberOption.IsComma"
                      Degit="@numberOption.NumberOfDigit"
                      MaxValue="@numberOption.MaxValue"
                      MinValue="@numberOption.MinValue"></EditerNumber>
        break;
    case BoolOption<TProperty> boolOption:
        <EditerBool AdditionalAttributes="@boolOption.FieldAdditionalAttributes"
                    Value="@Value"
                    ValueChanged="EventCallback.Factory.Create<TProperty>(this, SetPropertyValue)"
                    ValueExpression="PropertyExpression"
                    PlaceHolder="@boolOption.PlaceHolder"
                    TrueValue="@boolOption.TrueValue"
                    FalseValue="@boolOption.FalseValue"></EditerBool>
        break;

    case DateTimeOption dateTimeOption:
        <EditerDate AdditionalAttributes="@AdditionalAttributes"
                    Value="@Value"
                    ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                    ValueExpression="PropertyExpression"
                    DateType="@dateTimeOption.DateType"
                    CustomParseFormat="@dateTimeOption.ParseFormat"></EditerDate>
        break;

    case TimespanOption timespanOption:
        <EditerTimeSpan AdditionalAttributes="@AdditionalAttributes"
                        Value="@Value"
                        ValueChanged="EventCallback.Factory.Create<TProperty>(this, SetPropertyValue)"
                        ValueExpression="PropertyExpression"
                        Comma="@timespanOption.IsComma"
                        MaxValue="@timespanOption.MaxValue"
                        Degit="@timespanOption.NumberOfDigit"
                        TimeSpanUnit="@timespanOption.Unit"></EditerTimeSpan>
        break;

    case StringOption stringOption:
        if (stringOption.IsMutiLine)
        {
            <EditerTextArea AdditionalAttributes="@AdditionalAttributes"
                            Value="@Value"
                            ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                            ValueExpression="PropertyExpression"
                            PlaceHolder="@stringOption.PlaceHolder"></EditerTextArea>
        }
        else
        {
            <EditerText AdditionalAttributes="@AdditionalAttributes"
                        Value="@Value"
                        ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                        ValueExpression="PropertyExpression"
                        PlaceHolder="@stringOption.PlaceHolder"
                        EditType="@stringOption.TextEditType"></EditerText>
        }
        break;
    case SelectOption<TModel> selectOption:
        <div class="select">
            <EditerSelect AdditionalAttributes="@AdditionalAttributes"
                          Value="@Value"
                          ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                          ValueExpression="PropertyExpression"
                          PlaceHolder="@Option.PlaceHolder"
                          Source="@(()=>selectOption.Source)"
                          OptionContents="@selectOption.GetOptionText"
                          ChoosePromptContents="@selectOption.ChoosePrompt"></EditerSelect>
        </div>
        break;
    default:
        throw new NotImplementedException($"'{BaseOptions}' is not implemented to switch cases.");
}