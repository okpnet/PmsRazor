@inherits OptionParameterRazorCore
@typeparam TModel where TModel:class
@typeparam TProperty

@switch (FieldDataTypes)
{
    case FieldDataType.Number:
        var numberOption = ConfigOption as NumberConfigOption<TProperty> ?? new();

        <EditerNumber 
            Value="@Value"
            ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                      AdditionalAttributes="@AdditionalAttributes"
                      ValueExpression="PropertyExpression"
                      Comma="@numberOption.IsComma"
                      Degit="@numberOption.NumberOfDigit"
                      MaxValue="@numberOption.MaxValue"
        MinValue="@numberOption.MinValue"></EditerNumber>
        break;
    case FieldDataType.Check:
        var checkOption = ConfigOption as CheckConfigOption<TProperty> ?? new();
        <EditerBool AdditionalAttributes="@AdditionalAttributes"
                    Value="@Value"
                    ValueChanged="EventCallback.Factory.Create<TProperty>(this, SetPropertyValue)"
                    ValueExpression="PropertyExpression"
                    TrueValue="@checkOption.TrueValue"
        FalseValue="@checkOption.FalseValue"></EditerBool>
        break;

    case FieldDataType.Date:
        var dateOption = ConfigOption as DateConfigOption ?? new();

        <EditerDate AdditionalAttributes="@AdditionalAttributes"
                    Value="@Value"
                    ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                    ValueExpression="PropertyExpression"
                    DateType="@dateOption.DateType"
        CustomParseFormat="@dateOption.ParseFormat"></EditerDate>
        break;

    case FieldDataType.TiemSpan:
        var timespanOption = ConfigOption as TimespanConfigOption ?? new();
        <EditerTimeSpan AdditionalAttributes="@AdditionalAttributes"
                        Value="@Value"
                        ValueChanged="EventCallback.Factory.Create<TProperty>(this, SetPropertyValue)"
                        ValueExpression="PropertyExpression"
                        Comma="@timespanOption.IsComma"
                        MaxValue="@timespanOption.MaxValue"
                        Degit="@timespanOption.NumberOfDigit"
        TimeSpanUnit="@timespanOption.Unit"></EditerTimeSpan>
        break;

    case FieldDataType.Text:
        var textOption = ConfigOption as TextConfigOption ?? new();

        if (textOption.IsMutiLine)
        {
            <EditerTextArea AdditionalAttributes="@AdditionalAttributes"
                            Value="@Value"
                            ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                            ValueExpression="PropertyExpression">
                        </EditerTextArea>
        }
        else
        {
            <EditerText AdditionalAttributes="@AdditionalAttributes"
                        Value="@Value"
                        ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                        ValueExpression="PropertyExpression"
            EditType="@textOption.TextEditType"></EditerText>
        }
        break;
    case FieldDataType.Select:
        var selectOption = ConfigOption as SelectConfgOption<TProperty> ?? new();
        <div class="select">
            <EditerSelect AdditionalAttributes="@AdditionalAttributes"
                          Value="@Value"
                          ValueChanged="EventCallback.Factory.Create<TProperty>(this,SetPropertyValue)"
                          ValueExpression="PropertyExpression"
                          Source="@(()=>selectOption.Source)"
                          OptionContents="@selectOption.GetOptionText"
                          ChoosePromptContents="@selectOption.ChoosePrompt"></EditerSelect>
        </div>
        break;
    default:
        throw new NotImplementedException($"'{FieldDataTypes}' is not implemented to switch cases.");
}